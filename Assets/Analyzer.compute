#pragma kernel ScanHDir
#pragma kernel ScanVDir
#pragma kernel Aggregate

uint2 Dims;
Texture2D<float4> Source;
RWStructuredBuffer<uint> PerLineOut;

uint LumaIndex(float3 rgb)
{
    return saturate(dot(rgb, float3(0.2126729, 0.7151522, 0.0721750))) * 255;
}

[numthreads(32, 1, 1)]
void ScanHDir(uint id : SV_DispatchThreadID)
{
    uint acc[256];
    if (id >= Dims.y) return;
    for (uint i = 0; i < 256; i++) acc[i] = 0;
    for (uint x = 0; x < Dims.x; x++) acc[LumaIndex(Source[uint2(x, id)].rgb)]++;
    for (i = 0; i < 256; i++) PerLineOut[id * 256 + i] = acc[i];
}

[numthreads(32, 1, 1)]
void ScanVDir(uint id : SV_DispatchThreadID)
{
    uint acc[256];
    if (id >= Dims.x) return;
    for (uint i = 0; i < 256; i++) acc[i] = 0;
    for (uint y = 0; y < Dims.y; y++) acc[LumaIndex(Source[uint2(id, y)].rgb)]++;
    for (i = 0; i < 256; i++) PerLineOut[id * 256 + i] = acc[i];
}

uint LineCount;
StructuredBuffer<uint> PerLineIn;
RWStructuredBuffer<uint> TotalOut;

[numthreads(32, 1, 1)]
void Aggregate(uint id : SV_DispatchThreadID)
{
    uint acc = 0;
    for (uint i = 0; i < LineCount; i++) acc += PerLineIn[i * 256 + id];
    TotalOut[id] = acc;
}
