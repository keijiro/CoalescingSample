#pragma kernel Grayscale
#pragma kernel ScanHDir
#pragma kernel ScanVDir
#pragma kernel Aggregate

uint2 Dims;
uint LineCount;

uint GetOffs(uint x, uint y) { return Dims.x * y + x; }
uint GetOffs(uint2 p) { return GetOffs(p.x, p.y); }

Texture2D<float4> Source;
RWStructuredBuffer<float> ImageOut;

[numthreads(64, 1, 1)]
void Grayscale(uint2 id : SV_DispatchThreadID)
{
    if (any(id >= Dims)) return;
    float3 prim = float3(0.2126729, 0.7151522, 0.0721750);
    ImageOut[GetOffs(id)] = saturate(dot(Source[id].rgb, prim));
}

StructuredBuffer<float> ImageIn;
RWStructuredBuffer<uint> PerLineOut;

[numthreads(32, 1, 1)]
void ScanHDir(uint id : SV_DispatchThreadID)
{
    uint acc[256];
    if (id >= Dims.y) return;
    for (uint i = 0; i < 256; i++) acc[i] = 0;
    for (uint x = 0; x < Dims.x; x++) acc[ImageIn[GetOffs(x, id)] * 255]++;
    for (i = 0; i < 256; i++) PerLineOut[id * 256 + i] = acc[i];
}

[numthreads(32, 1, 1)]
void ScanVDir(uint id : SV_DispatchThreadID)
{
    uint acc[256];
    if (id >= Dims.x) return;
    for (uint i = 0; i < 256; i++) acc[i] = 0;
    for (uint y = 0; y < Dims.y; y++) acc[ImageIn[GetOffs(id, y)] * 255]++;
    for (i = 0; i < 256; i++) PerLineOut[id * 256 + i] = acc[i];
}

StructuredBuffer<uint> PerLineIn;
RWStructuredBuffer<uint> TotalOut;

[numthreads(32, 1, 1)]
void Aggregate(uint id : SV_DispatchThreadID)
{
    uint acc = 0;
    for (uint i = 0; i < LineCount; i++) acc += PerLineIn[i * 256 + id];
    TotalOut[id] = acc;
}
