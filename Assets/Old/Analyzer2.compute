#pragma kernel Preprocess
#pragma kernel Scan
#pragma kernel Aggregate

Texture2D<float4> Source;
RWStructuredBuffer<float> ImageOut;

[numthreads(8, 8, 1)]
void Preprocess(uint2 id : SV_DispatchThreadID)
{
    const float3 prim = float3(0.2126729, 0.7151522, 0.0721750);

    uint w, h;
    Source.GetDimensions(w, h);

    if (any(id >= uint2(w, h))) return;

    ImageOut[w * id.y + id.x] = dot(Source[id].rgb, prim);
}

StructuredBuffer<float> ImageIn;
RWStructuredBuffer<uint> CountOut;
uint ScanThreads, ScanLength;

#if 0

groupshared uint acc[32 * 64];

[numthreads(32, 1, 1)]
void Scan(uint id : SV_DispatchThreadID, uint gtid : SV_GroupThreadID, uint gid : SV_GroupID)
{
    for (uint i = 0; i < 64; i++) acc[i * 32 + gtid] = 0;

    for (i = 0; i < ScanLength; i++)
    {
        float v = ImageIn[id * ScanLength + i];
        acc[gtid * 64 + (uint)min(v * 63, 63)]++;
    }

    GroupMemoryBarrierWithGroupSync();

    float t1 = 0;
    float t2 = 0;

    for (uint j = 0; j < 32; j++)
    {
        t1 += acc[j * 64 + gtid     ];
        t2 += acc[j * 64 + gtid + 32];
    }

    CountOut[gid * 64 + gtid     ] = t1;
    CountOut[gid * 64 + gtid + 32] = t2;
}

#else

groupshared uint acc[32 * 64];

[numthreads(32, 1, 1)]
void Scan(uint id : SV_DispatchThreadID, uint gtid : SV_GroupThreadID, uint gid : SV_GroupID)
{
    for (uint i = 0; i < 64; i++) acc[i * 32 + gtid] = 0;

    for (i = 0; i < ScanLength; i++)
    {
        float v = ImageIn[((i + (id >> 12) * 32) * 4096) + (id & 0xfff)];
        acc[gtid * 64 + (uint)min(v * 63, 63)]++;
    }

    GroupMemoryBarrierWithGroupSync();

    float t1 = 0;
    float t2 = 0;

    for (uint j = 0; j < 32; j++)
    {
        t1 += acc[j * 64 + gtid     ];
        t2 += acc[j * 64 + gtid + 32];
    }

    CountOut[gid * 64 + gtid     ] = t1;
    CountOut[gid * 64 + gtid + 32] = t2;
}

#endif

StructuredBuffer<uint> CountIn;
RWStructuredBuffer<uint> TotalOut;

[numthreads(32, 1, 1)]
void Aggregate(uint id : SV_DispatchThreadID)
{
    uint acc = 0;

    for (uint i = 0; i < ScanThreads / 32; i++)
        acc += CountIn[i * 64 + id];

    TotalOut[id] = acc;
}
